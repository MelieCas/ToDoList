@page "/todo"
@using ToDoList.DTO
@inject LocalStorageAccessor LocalStorageAccessor
@inject HttpClient Http

<PageTitle>Todo</PageTitle>

<h1>Todo</h1>
    @foreach(TodoTask item in tasks) {
        <p><input type="checkbox" checked="@item.IsCompleted" @onclick="() => SaveAsync(item)" /> @item <button class="btn-delete" @onclick="() => DeleteTaskAsync(item)">Delete</button></p>
    }
<input type="text" @bind=TaskText/>
<button class="btn btn-primary" @onclick="AddTaskAsync">Add</button>

@code {
    private List<TodoTask> tasks = new();
    private string? TaskText {get; set;}

    private async Task SaveAsync(TodoTask edit) {

        edit.IsCompleted = !edit.IsCompleted;
        await Http.PutAsJsonAsync($"https://localhost:7209/api/TodoItems/{edit.Id}", edit);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender) {
        if (firstRender) 
        {
            tasks = await Http.GetFromJsonAsync<List<TodoTask>>("https://localhost:7209/api/TodoItems");
            StateHasChanged();
        }
        
    }
    private async Task AddTaskAsync()
    {   
        var task = new TodoTask {Name = TaskText};
        var resp = await Http.PostAsJsonAsync<TodoTask>("https://localhost:7209/api/TodoItems", task);
        task = await resp.Content.ReadFromJsonAsync<TodoTask>();    
        tasks.Add(task);
        TaskText = "";
    }
    private async Task DeleteTaskAsync(TodoTask deleteItem)
    {
    tasks.Remove(deleteItem);
    await Http.DeleteAsync($"https://localhost:7209/api/TodoItems/{deleteItem.Id}");
    }
}